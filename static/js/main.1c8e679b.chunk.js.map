{"version":3,"sources":["PokemonCard.js","Pokemon.js","PokemonPage.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","_this","Object","esm_classCallCheck","this","esm_possibleConstructorReturn","esm_getPrototypeOf","call","state","data","isLoading","hasError","_this2","fetch","match","params","id","then","response","res","json","setState","catch","error","console","log","react_default","a","createElement","capitalizeFirstLetter","string","charAt","toUpperCase","slice","pokemonTypes","types","map","typeArray","idx","key","type","name","pokemonAbilities","abilities","abilityArray","ability","pokemonStats","stats","statArray","className","stat","base_stat","src","sprites","front_default","alt","height","weight","React","Component","pokeIdx","url","imgUrl","concat","PokemonPage","results","pokemonGroup","pokemonObject","src_Pokemon_0","Home","react_router_dom","to","NotFound","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","react_router","exact","path","component","PokemonCard","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c8e679b.chunk.js","sourcesContent":["import React from 'react';\nimport './Pokemon.css';\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Switch,\n//   Link\n// } from 'react-router-dom';\n\nclass Pokemon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          data: {},\n          isLoading: true,\n          hasError: false\n        }\n    }\n\n    componentDidMount() {\n        // TODO edit URL\n        fetch('https://pokeapi.co/api/v2/pokemon/' + this.props.match.params.id)\n          .then(response => {\n            return response;\n        }).then(res => {\n            //console.log(res);\n            return res.json();\n        })\n        .then(data => {\n            this.setState({\n              data: data,\n              isLoading: false\n            });\n        })\n\n        .catch(error => {\n            this.setState({\n                hasError: true,\n                isLoading: false\n            });\n        console.log(this.state.data);\n        });}\n\n        render (){\n            if (this.state.isLoading) {\n                return <div>Loading...</div>;\n            }\n    \n            if (this.state.hasError) {\n                return <div>ERROR, please reload and try again</div>;\n            }\n        const data = this.state.data;\n\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        const pokemonTypes = data.types\n            .map((typeArray, id) => \n                {return (\n                    <li idx={id} key={id}>\n                        {capitalizeFirstLetter(typeArray.type.name)}\n                    </li>\n                )}\n            )\n\n        const pokemonAbilities = data.abilities\n            .map((abilityArray, id) => \n                {return (\n                    <li idx={id} key={id}>\n                        {capitalizeFirstLetter(abilityArray.ability.name)}\n                    </li>\n                )}\n            )\n\n        const pokemonStats= data.stats\n            .map((statArray, id) => \n                {return (\n                    <li className=\"pokemon-stat\" idx={id} key={id}>\n                        {capitalizeFirstLetter(statArray.stat.name)}:  \n                        &nbsp; {statArray.base_stat}\n                    </li>\n                )}\n            )\n\n        return (\n            <div className=\"pokemon-card-container\">\n                <img className=\"pokemon-card\" src={data.sprites.front_default} alt={data.name} />\n                <h4>{capitalizeFirstLetter(data.name)}</h4>\n                <p className=\"pokemon-id\">No. {data.id}</p>\n                <div className=\"basic-stats\">\n                    <p className=\"pokemon-card\">HT {data.height}</p>\n                    <p className=\"pokemon-card\">WT {data.weight} lb</p>\n                </div>\n                <div className=\"basic-stats\">\n                    <ul className=\"pokemon-card poke-types\">{pokemonTypes}</ul>\n                    <ul className=\"pokemon-card poke-ability\">{pokemonAbilities}</ul>\n                </div>\n                <ul className=\"pokemon-card poke-stats\">{pokemonStats}</ul>\n            </div>\n        );\n        \n    }\n }\n\nexport default Pokemon;\n","import React from 'react';\nimport './Pokemon.css';\nimport PropTypes from 'prop-types';\n\nclass Pokemon extends React.Component {\n      static propTypes = {\n        name: PropTypes.string.isRequired,\n        pokeIdx: PropTypes.number.isRequired,\n        url: PropTypes.string.isRequired\n      }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            pokeIdx: '',\n            url: ''\n        }\n    }\n\n    componentDidMount() {\n        //const { name, pokeIdx, url } = this.props;\n    //console.log(this.props.name)\n        this.setState({\n            name: this.props.name,\n            idx: this.props.pokeIdx+1,\n            url: this.props.url\n        });\n    }\n\n    render () {\n        const idx = this.state.idx;\n        //const imgUrl = `http://pokeapi.co/media/sprites/pokemon/{this.state.pokeIdx}.png`;\n        const imgUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${idx}.png`;\n        //console.log(idx)\n\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        return (\n            <div className=\"pokemon\">\n                <img src={imgUrl} alt={this.state.name} />\n                <h3>\n                    {capitalizeFirstLetter(this.state.name)}\n                </h3>\n                <h3>\n                    No. {idx}\n                </h3>\n            </div>\n        );\n    }\n}\n\nexport default Pokemon;","import React from 'react';\nimport './Pokemon.css';\nimport Pokemon from './Pokemon.js';\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Switch,\n//   Link\n// } from 'react-router-dom';\n\n\nclass PokemonPage extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {},\n        isLoading: true,\n        hasError: false\n      }\n    }\n  \n    componentDidMount() {\n        fetch('https://pokeapi.co/api/v2/pokemon/?limit=807')\n        .then(response => {\n            // console.log(response);\n            // console.log(response.json());\n            // console.log(response.json());\n            // console.log(response.JSON.stringify()); // data can be `string` or {object}!\n            return response;\n        }).then(res => {\n            // console.log(res);\n            return res.json();\n        })\n        .then(data => {\n            // console.log(data);\n            // console.log(data.results[0].name);\n            this.setState({\n                data: data.results,\n                isLoading: false\n            });\n            // console.log(this.state.data);\n            // console.log('Success:', JSON.stringify(data))\n      }); \n    };\n\n    render (){\n        if (this.state.isLoading) {\n            return <div>Loading...</div>;\n        };\n        if (this.state.hasError) {\n            return <div>ERROR, please reload and try again</div>;\n        };\n\n        const data = this.state.data;\n        const pokemonGroup = data\n            .map((pokemonObject, id) => \n                {return(\n                    <li idx={id} key={id}>\n                        <Pokemon name={pokemonObject.name} pokeIdx={id} url={pokemonObject.url} />\n                    </li>\n                )}\n            );\n        \n        return (\n            <div>\n                <h1>All 807 Pokémon</h1>\n                    <ul className=\"pokemon-group\">\n                        {pokemonGroup}\n                    </ul>\n                <hr />                   \n            </div> \n        );\n    }\n}\nexport default PokemonPage;\n","import React from 'react';\nimport './App.css';\nimport PokemonCard from './PokemonCard.js'\nimport PokemonPage from './PokemonPage.js';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom';\n\nfunction Home(props) {\n  return (\n    <div>\n      <h1>Pokémon API - Homework 5</h1>\n      <p>Go to '<Link to=\"/pokemon\" className=\"link\">https://jiansorge.github.io/week5-assignment/#/pokemon</Link>' to view all 807 Pokémon.</p>\n      <p>Type the name of a Pokémon after '<u>https://jiansorge.github.io/week5-assignment/#/pokemon</u>'' to view it's info!</p>\n      <p>i.e. '<Link to=\"/pokemon/mew\" className=\"link\">https://jiansorge.github.io/week5-assignment/#/pokemon/mew</Link>'</p>\n    </div>\n  );\n}\n\nfunction NotFound() {\n  return <h1>404 Error</h1>\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      isLoading: true,\n      hasError: false\n    }\n  }\n\n render (){\n\n    return(\n      <div className=\"App\" >\n        <Router >\n          <div className=\"App-header\">\n            <Link to=\"/\" className=\"App-header-link\">Home</Link>\n            <Link to=\"/pokemon\" className=\"App-header-link\" >Pokémon</Link>\n          </div>\n \n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/pokemon/\" component={PokemonPage} />\n            <Route path=\"/pokemon/:id\" component={PokemonCard} />\n            <Route component={NotFound} />\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n// TODO Pokemon grid page removed. could not get map or sub-component 'Pokemon' to work\n//  <Link to=\"/pokemon/bulbasaur\">Bulbasaur</Link>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}